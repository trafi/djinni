# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from derivings.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyPrimitive, CPyRecord, CPyString
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class RecordWithDerivings:
    c_data_set = MultiSet()

    @staticmethod
    def check_c_data_set_empty():
        assert len(RecordWithDerivings.c_data_set) == 0

    # Record deriving types
    def __eq__(self, other):
        return self.key1==other.key1 and \
        self.key2.__eq__(other.key2)
    def __lt__(self, other):
        if self.key1<other.key1:
            return True
        if self.key1>other.key1:
            return False
        if self.key2.__lt__(other.key2):
            return True
        if self.key2.__gt__(other.key2):
            return False
        return False
    def __le__(self, other):
        return not other.__lt__(self)
    def __ge__(self, other):
        return not self.__lt__(other)
    def __gt__(self, other):
        return other.__lt__(self)
    def __hash__(self):
        # Pick an arbitrary non-zero starting value
        hash_code = 17
        hash_code = hash_code * 31 + self.key1.__hash__()
        hash_code = hash_code * 31 + self.key2.__hash__()
        return hash_code

    def __init__(self, key1, key2):
        self.key1 = key1
        self.key2 = key2

