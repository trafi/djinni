# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from enum.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyEnum, CPyRecord

from color import Color
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from opt_color_record import OptColorRecord

class OptColorRecordHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("int(struct DjinniRecordHandle *)")
    def get_opt_color_record_f1(cself):
        try:
            return CPyEnum.fromPyOpt(CPyRecord.toPy(None, cself).my_color)
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(int)")
    def python_create_opt_color_record(my_color):
        py_rec = OptColorRecord(
            CPyEnum.toPyOpt(Color, my_color))
        return CPyRecord.fromPy(OptColorRecord.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in OptColorRecord.c_data_set
        OptColorRecord.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.opt_color_record_add_callback_python_create_opt_color_record(OptColorRecordHelper.python_create_opt_color_record)
        lib.opt_color_record_add_callback___delete(OptColorRecordHelper.__delete)
        lib.opt_color_record_add_callback_get_opt_color_record_f1(OptColorRecordHelper.get_opt_color_record_f1)

OptColorRecordHelper._add_callbacks()

